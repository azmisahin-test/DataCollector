services:

  # Message Brokers
  message_brokers:
    kafka:
      image: apache/kafka:latest
      environment:
        KAFKA_NODE_ID: 1
        KAFKA_PROCESS_ROLES: broker,controller
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
        KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_NUM_PARTITIONS: 3
      ports:
        - "9092:9092"
        - "9093:9093"
      networks:
        - my_shared_network
      volumes:
        - ./data/kafka:/kafka/data

    rabbitmq:
      image: rabbitmq:management
      ports:
        - "5672:5672"
        - "15672:15672"
      networks:
        - my_shared_network
      environment:
        RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
        RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}

  # Message Brokers Management Tools
  message_brokers_management:
    kafdrop:
      image: obsidiandynamics/kafdrop
      ports:
        - "9000:9000"
      environment:
        KAFKA_SERVERS: "${KAFKA_BROKER}"
      networks:
        - my_shared_network
      depends_on:
        - kafka

  # Databases
  databases:
    mysql:
      image: mysql:latest
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
        MYSQL_USER: ${MYSQL_USER}
        MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      ports:
        - "3306:3306"
      volumes:
        - ./data/mysql:/var/lib/mysql
        - ./databases/mysql/service/:/docker-entrypoint-initdb.d/
      networks:
        - my_shared_network
      healthcheck:
        test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}" ]
        interval: 10s
        timeout: 5s
        retries: 5

    mongo:
      image: mongo
      environment:
        MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ports:
        - "27017:27017"
      volumes:
        - ./data/mongodb:/data/db
        - ./databases/mongodb/service/init.js:/docker-entrypoint-initdb.d/mongo-init.js
      networks:
        - my_shared_network
      healthcheck:
        test: [ "CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })" ]
        interval: 10s
        timeout: 5s
        retries: 5

    postgresql:
      image: postgres
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB_NAME}
      ports:
        - "5432:5432"
      volumes:
        - ./data/postgresql:/var/lib/postgresql/data
        - ./databases/postgresql/service/init.sql:/docker-entrypoint-initdb.d/init.sql
      networks:
        - my_shared_network
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
        interval: 10s
        timeout: 5s
        retries: 5

    cassandra:
      image: cassandra:latest
      environment:
        - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
        - CASSANDRA_DC=DC1
        - CASSANDRA_RACK=Rack1
      ports:
        - "9042:9042"
      networks:
        - my_shared_network

    clickhouse:
      image: clickhouse/clickhouse-server
      ports:
        - "9000:9000"
        - "8123:8123"
      volumes:
        - ./data/clickhouse:/var/lib/clickhouse
        - ./databases/clickhouse/service/init.sql:/docker-entrypoint-initdb.d/init.sql
      networks:
        - my_shared_network

    redis:
      image: redis:latest
      ports:
        - "6379:6379"
      volumes:
        - ./data/redis:/data
      networks:
        - my_shared_network

    influxdb:
      image: influxdb
      ports:
        - "8086:8086"
      environment:
        INFLUXDB_DB: ${INFLUXDB_DB}
        INFLUXDB_ADMIN_USER: ${INFLUXDB_ADMIN_USER}
        INFLUXDB_ADMIN_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      volumes:
        - ./data/influxdb:/var/lib/influxdb
      networks:
        - my_shared_network

    neo4j:
      image: neo4j:4.4
      environment:
        - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      ports:
        - "7474:7474"
        - "7687:7687"
      volumes:
        - ./data/neo4j:/data
      networks:
        - my_shared_network

    couchdb:
      image: couchdb:latest
      ports:
        - "5984:5984"
      environment:
        - COUCHDB_USER=${COUCHDB_USER}
        - COUCHDB_PASSWORD=${COUCHDB_PASSWORD}
      volumes:
        - ./data/couchdb:/opt/couchdb/data
      networks:
        - my_shared_network

  # Database Management Tools
  database_management:
    mysql_ui:
      image: phpmyadmin/phpmyadmin
      environment:
        PMA_HOST: mysql
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      ports:
        - "8081:80"
      networks:
        - my_shared_network
      depends_on:
        - mysql

    mongo_ui:
      image: mongo-express
      environment:
        ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@mongo:27017/
        ME_CONFIG_BASICAUTH: false
      ports:
        - "8082:8081"
      networks:
        - my_shared_network
      depends_on:
        - mongo

    postgresql_ui:
      image: dpage/pgadmin4
      ports:
        - "8083:80"
      volumes:
        - ./databases/postgresql/service-ui/servers.json:/pgadmin4/servers.json
      environment:
        PGADMIN_DEFAULT_EMAIL: "${POSTGRES_USER}@${DOMAIN}"
        PGADMIN_DEFAULT_PASSWORD: "${POSTGRES_PASSWORD}"
      networks:
        - my_shared_network
      depends_on:
        - postgresql

    dbeaver:
      image: dbeaver/dbeaver
      ports:
        - "8084:8080" # DBeaver web interface
      networks:
        - my_shared_network
      depends_on:
        - mysql
        - mongo
        - postgresql
        - cassandra
        - redis
        - influxdb
        - elasticsearch
      command: >
        sh -c "while true; do sleep 30; done"

  # Elasticsearch Services
  elasticsearch_services:
    elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
      environment:
        - discovery.type=single-node
        - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      ports:
        - "9200:9200"
        - "9300:9300"
      networks:
        - my_shared_network

    kibana:
      image: docker.elastic.co/kibana/kibana:7.10.1
      ports:
        - "5601:5601"
      networks:
        - my_shared_network

  # Monitoring Services
  monitoring:
    prometheus:
      image: prom/prometheus
      ports:
        - "9090:9090"
      volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      networks:
        - my_shared_network

    grafana:
      image: grafana/grafana
      ports:
        - "3000:3000"
      networks:
        - my_shared_network

  # Web Services
  web_services:
    web:
      image: nginx:latest
      ports:
        - "80:80"
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf
      networks:
        - my_shared_network

  # Data Collection Services
  data_collection:
    data-collection-python:
      build:
        context: ./data-collection-python
        dockerfile: Dockerfile
      env_file:
        - .env
      networks:
        - my_shared_network
      depends_on:
        - mysql
        - mongo
        - postgresql
        - kafka
        - rabbitmq
      command: >
        sh -c "while true; do python src/app.py; sleep ${SLEEP_DURATION}; done"

    data-collection-node:
      build:
        context: ./data-collection-node
        dockerfile: Dockerfile
      env_file:
        - .env
      networks:
        - my_shared_network
      depends_on:
        - mysql
        - mongo
        - postgresql
        - kafka
        - rabbitmq
      command: >
        sh -c "while true; do node src/app.js; sleep ${SLEEP_DURATION}; done"

networks:
  my_shared_network:
    driver: bridge
